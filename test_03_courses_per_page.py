import unittest
import time
import os
import datetime
from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from webdriver_manager.chrome import ChromeDriverManager
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException, NoSuchElementException
from selenium.webdriver.common.action_chains import ActionChains

class LearnPressCoursesPerPageTest(unittest.TestCase):
    BASE_URL = "http://wp.local"
    LOGIN_PATH = "/wp-login.php"
    ADMIN_PATH = "/wp-admin"
    LP_COURSES_PATH = "/wp-admin/edit.php?post_type=lp_course"
    SETTINGS_PATH = "/admin.php?page=learn-press-settings"
    COURSES_PATH = "/courses/"
    THEME_NAME = "Twenty Twenty-One"

    def activate_theme(self, theme_name=None):
        """T·ª± ƒë·ªông active theme cho WordPress qua giao di·ªán admin."""
        if theme_name is None:
            theme_name = self.THEME_NAME
        self.step_demo(f"B·∫Øt ƒë·∫ßu ki·ªÉm tra v√† k√≠ch ho·∫°t theme: {theme_name}")
        # Truy c·∫≠p trang qu·∫£n l√Ω theme
        themes_url = f"{self.BASE_URL}/wp-admin/themes.php"
        self.driver.get(themes_url)
        wait = WebDriverWait(self.driver, 10)
        wait.until(EC.presence_of_element_located((By.ID, "wpbody-content")))
        time.sleep(1)
        # Ki·ªÉm tra theme ƒë√£ active ch∆∞a
        try:
            active_theme = self.driver.find_element(By.CSS_SELECTOR, "div.theme.active")
            active_theme_name = active_theme.find_element(By.CLASS_NAME, "theme-name").text.strip()
            if theme_name.lower() in active_theme_name.lower():
                self.step_demo(f"Theme '{theme_name}' ƒë√£ ƒë∆∞·ª£c k√≠ch ho·∫°t.")
                return
        except Exception:
            pass
        # N·∫øu ch∆∞a active th√¨ t√¨m theme v√† click Activate
        themes = self.driver.find_elements(By.CSS_SELECTOR, "div.theme")
        found = False
        for theme in themes:
            try:
                name = theme.find_element(By.CLASS_NAME, "theme-name").text.strip()
                if theme_name.lower() in name.lower():
                    found = True
                    # N·∫øu c√≥ n√∫t Activate ho·∫∑c K√≠ch ho·∫°t th√¨ click
                    try:
                        activate_btn = theme.find_element(By.CSS_SELECTOR, "a.activate, button.activate")
                        self.driver.execute_script("arguments[0].scrollIntoView(true);", activate_btn)
                        time.sleep(0.5)
                        activate_btn.click()
                        self.step_demo(f"ƒê√£ nh·∫•n n√∫t Activate cho theme '{theme_name}'")
                        # ƒê·ª£i theme ƒë∆∞·ª£c active
                        wait.until(lambda d: "active" in theme.get_attribute("class"))
                        self.step_demo(f"Theme '{theme_name}' ƒë√£ ƒë∆∞·ª£c k√≠ch ho·∫°t th√†nh c√¥ng!")
                        return
                    except Exception as e:
                        self.take_screenshot("cannot_activate_theme")
                        raise Exception(f"Kh√¥ng th·ªÉ k√≠ch ho·∫°t theme: {theme_name}. L·ªói: {str(e)}")
            except Exception:
                continue
        if not found:
            self.take_screenshot("theme_not_found")
            raise Exception(f"Kh√¥ng t√¨m th·∫•y theme: {theme_name} trong danh s√°ch themes.")
    USERNAME = "admin"
    PASSWORD = "admin"
    SCREENSHOT_DIR = os.path.join(os.path.dirname(os.path.dirname(os.path.dirname(__file__))), "screenshots")

    @classmethod
    def setUpClass(cls):
        if not os.path.exists(cls.SCREENSHOT_DIR):
            os.makedirs(cls.SCREENSHOT_DIR)
        cls.driver = webdriver.Chrome(service=Service(ChromeDriverManager().install()))
        cls.driver.maximize_window()
        cls.driver.implicitly_wait(10)

    @classmethod
    def tearDownClass(cls):
        cls.driver.quit()

    def login(self):
        """ƒêƒÉng nh·∫≠p v√†o trang qu·∫£n tr·ªã WordPress"""
        login_url = f"{self.BASE_URL}{self.LOGIN_PATH}"
        self.driver.get(login_url)
        print(f"ƒêang truy c·∫≠p trang ƒëƒÉng nh·∫≠p: {login_url}")
        
        # Nh·∫≠p username
        username_input = self.driver.find_element(By.ID, "user_login")
        username_input.clear()
        username_input.send_keys(self.USERNAME)
        
        # Nh·∫≠p password
        password_input = self.driver.find_element(By.ID, "user_pass")
        password_input.clear()
        password_input.send_keys(self.PASSWORD)
        
        # Nh·∫•n n√∫t ƒëƒÉng nh·∫≠p
        login_btn = self.driver.find_element(By.ID, "wp-submit")
        login_btn.click()
        
        # Ch·ªù trang qu·∫£n tr·ªã t·∫£i
        wait = WebDriverWait(self.driver, 20)
        try:
            wait.until(EC.presence_of_element_located((By.ID, "wpadminbar")))
            
            # Ki·ªÉm tra ƒëƒÉng nh·∫≠p th√†nh c√¥ng
            if "B·∫£ng tin" in self.driver.page_source or "Dashboard" in self.driver.page_source:
                print("‚úÖ ƒêƒÉng nh·∫≠p th√†nh c√¥ng")
                return True
            else:
                print("‚ùå ƒêƒÉng nh·∫≠p th·∫•t b·∫°i: Kh√¥ng t√¨m th·∫•y text Dashboard")
                self.take_screenshot("login_failed_no_dashboard")
                return False
        except TimeoutException:
            print("‚ùå ƒêƒÉng nh·∫≠p th·∫•t b·∫°i: Timeout khi ch·ªù admin bar")
            self.take_screenshot("login_failed_timeout")
            return False

    def take_screenshot(self, test_name):
        """Ch·ª•p ·∫£nh m√†n h√¨nh khi test th·∫•t b·∫°i"""
        # T·∫°o t√™n file ·∫£nh ch·ª•p v·ªõi timestamp
        timestamp = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"{timestamp}_{test_name}.png"
        filepath = os.path.join(self.SCREENSHOT_DIR, filename)
        
        # Ch·ª•p ·∫£nh m√†n h√¨nh
        try:
            self.driver.save_screenshot(filepath)
            print(f"üì∏ ƒê√£ ch·ª•p ·∫£nh m√†n h√¨nh: {filepath}")
            return filepath
        except Exception as e:
            print(f"‚ùå Kh√¥ng th·ªÉ ch·ª•p ·∫£nh m√†n h√¨nh: {str(e)}")
            return None

    def step_demo(self, msg, delay=1.5):
        """In th√¥ng b√°o v√† t·∫°m d·ª´ng ƒë·ªÉ demo"""
        print(f"[DEMO] {msg}")
        time.sleep(delay)

    def test_01_courses_per_page_setting(self):
        """Test Case: Ki·ªÉm tra c√†i ƒë·∫∑t "Courses per page" c·ªßa LearnPress"""
        try:
            # ƒêƒÉng nh·∫≠p v√†o WordPress admin
            self.login()
            self.step_demo("ƒê√£ ƒëƒÉng nh·∫≠p th√†nh c√¥ng v√†o trang qu·∫£n tr·ªã")
            # K√≠ch ho·∫°t theme Twenty Twenty-One tr∆∞·ªõc khi test
            self.activate_theme("Twenty Twenty-One")
            
            # Truy c·∫≠p trang LearnPress Courses tr∆∞·ªõc
            lp_courses_url = f"{self.BASE_URL}{self.LP_COURSES_PATH}"
            self.driver.get(lp_courses_url)
            self.step_demo(f"Truy c·∫≠p trang LearnPress Courses: {lp_courses_url}")
            
            # Ch·ªù trang courses admin t·∫£i xong
            wait = WebDriverWait(self.driver, 10)
            wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, "body.post-type-lp_course")))
            self.take_screenshot("learnpress_courses_admin")
            
            # T√¨m v√† click v√†o menu Settings
            try:
                # T√¨m link Settings trong menu LearnPress
                settings_link = self.driver.find_element(By.CSS_SELECTOR, "a[href='admin.php?page=learn-press-settings']")
                self.step_demo("T√¨m th·∫•y link Settings, chu·∫©n b·ªã nh·∫•n v√†o")
            except NoSuchElementException:
                # T√¨m theo text
                links = self.driver.find_elements(By.TAG_NAME, "a")
                settings_link = None
                for link in links:
                    if "Settings" in link.text and "learn-press" in link.get_attribute("href"):
                        settings_link = link
                        break
                if not settings_link:
                    self.take_screenshot("cannot_find_settings_link")
                    raise Exception("Kh√¥ng th·ªÉ t√¨m th·∫•y link Settings")
            
            # Click v√†o link Settings
            settings_link.click()
            self.step_demo("ƒê√£ nh·∫•n v√†o link Settings")
            
            # Ch·ªù trang settings t·∫£i xong
            wait = WebDriverWait(self.driver, 10)
            self.step_demo(f"ƒê√£ chuy·ªÉn ƒë·∫øn trang LearnPress Settings")
            self.take_screenshot("learnpress_settings_page")
            
            # Ch·ªù trang settings t·∫£i xong (th·ª≠ nhi·ªÅu selector kh√°c nhau)
            wait = WebDriverWait(self.driver, 10)
            try:
                wait.until(lambda driver: any([
                    len(driver.find_elements(By.CSS_SELECTOR, "div.learn-press-settings-wrap")) > 0,
                    len(driver.find_elements(By.CSS_SELECTOR, "form.learn-press-settings")) > 0,
                    len(driver.find_elements(By.CSS_SELECTOR, "#learn-press-settings")) > 0,
                    len(driver.find_elements(By.CSS_SELECTOR, ".learn-press-settings-page")) > 0
                ]))
                self.step_demo("Trang LearnPress Settings ƒë√£ t·∫£i xong")
                self.take_screenshot("learnpress_settings_loaded")
            except TimeoutException:
                print("Kh√¥ng t√¨m th·∫•y trang settings v·ªõi c√°c selector th√¥ng th∆∞·ªùng, th·ª≠ t√¨m tab Courses tr·ª±c ti·∫øp")
            
            # Click v√†o tab Courses - th·ª≠ nhi·ªÅu c√°ch kh√°c nhau
            try:
                # C√°ch 1: T√¨m theo CSS selector
                courses_tab = self.driver.find_element(By.CSS_SELECTOR, "a.nav-tab[href*='tab=courses']")
                self.step_demo("T√¨m th·∫•y tab Courses (c√°ch 1), chu·∫©n b·ªã nh·∫•n v√†o")
            except NoSuchElementException:
                try:
                    # C√°ch 2: T√¨m theo text
                    tabs = self.driver.find_elements(By.CSS_SELECTOR, "a.nav-tab")
                    courses_tab = None
                    for tab in tabs:
                        if "Courses" in tab.text:
                            courses_tab = tab
                            break
                    if courses_tab:
                        self.step_demo("T√¨m th·∫•y tab Courses (c√°ch 2), chu·∫©n b·ªã nh·∫•n v√†o")
                    else:
                        raise NoSuchElementException("Kh√¥ng t√¨m th·∫•y tab Courses")
                except NoSuchElementException:
                    # C√°ch 3: T√¨m theo href ch·ª©a courses
                    links = self.driver.find_elements(By.TAG_NAME, "a")
                    courses_tab = None
                    for link in links:
                        href = link.get_attribute("href")
                        if href and "tab=courses" in href:
                            courses_tab = link
                            break
                    if courses_tab:
                        self.step_demo("T√¨m th·∫•y tab Courses (c√°ch 3), chu·∫©n b·ªã nh·∫•n v√†o")
                    else:
                        self.take_screenshot("cannot_find_courses_tab")
                        raise Exception("Kh√¥ng th·ªÉ t√¨m th·∫•y tab Courses b·∫±ng b·∫•t k·ª≥ ph∆∞∆°ng ph√°p n√†o")
            
            # Click v√†o tab Courses
            courses_tab.click()
            self.step_demo("ƒê√£ nh·∫•n v√†o tab Courses")
            self.take_screenshot("courses_tab_clicked")
            
            # Th·ª≠ v·ªõi gi√° tr·ªã 1
            self.check_courses_per_page_value(1)
            
            # Th·ª≠ v·ªõi gi√° tr·ªã 4
            self.check_courses_per_page_value(4)
            
        except Exception as e:
            self.take_screenshot("courses_per_page_test_failed")
            self.fail(f"Test c√†i ƒë·∫∑t Courses per page th·∫•t b·∫°i: {str(e)}")

    def check_courses_per_page_value(self, value):
        """Ki·ªÉm tra c√†i ƒë·∫∑t Courses per page v·ªõi m·ªôt gi√° tr·ªã c·ª• th·ªÉ"""
        try:
            # T√¨m input field "Courses per page"
            try:
                self.driver.execute_script("window.scrollBy(0, 300);")
                time.sleep(1)
                courses_per_page_input = self.driver.find_element(By.ID, "learn_press_archive_course_limit")
                self.step_demo("T√¨m th·∫•y input field theo ID")
            except NoSuchElementException:
                courses_per_page_input = self.driver.find_element(By.NAME, "learn_press_archive_course_limit")
                self.step_demo("T√¨m th·∫•y input field theo name attribute")
            self.take_screenshot(f"before_change_value_{value}")
            courses_per_page_input.clear()
            courses_per_page_input.send_keys(str(value))
            self.step_demo(f"ƒê√£ nh·∫≠p gi√° tr·ªã {value} v√†o tr∆∞·ªùng Courses per page")
            # Nh·∫•n n√∫t Save settings (kh√¥ng c·∫ßn ki·ªÉm tra reload hay th√¥ng b√°o th√†nh c√¥ng)
            try:
                save_button = self.driver.find_element(By.CSS_SELECTOR, "p.lp-admin-settings-buttons > button.button.button-primary")
            except NoSuchElementException:
                buttons = self.driver.find_elements(By.TAG_NAME, "button")
                save_button = None
                for button in buttons:
                    if "Save settings" in button.text:
                        save_button = button
                        break
                if not save_button:
                    self.take_screenshot("cannot_find_save_button")
                    raise Exception("Kh√¥ng th·ªÉ t√¨m th·∫•y n√∫t Save settings")
            self.driver.execute_script("arguments[0].scrollIntoView(true);", save_button)
            time.sleep(1)
            save_button.click()
            self.step_demo("ƒê√£ nh·∫•n n√∫t Save settings (kh√¥ng ki·ªÉm tra reload hay th√¥ng b√°o th√†nh c√¥ng)")
            
            # Truy c·∫≠p trang /courses/ ƒë·ªÉ ki·ªÉm tra
            courses_url = f"{self.BASE_URL}{self.COURSES_PATH}"
            self.driver.get(courses_url)
            self.step_demo(f"Truy c·∫≠p trang danh s√°ch kh√≥a h·ªçc: {courses_url}")
            
            # Ch·ªù trang courses t·∫£i xong
            wait = WebDriverWait(self.driver, 10)
            wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, "ul.learn-press-courses")))
            course_list = self.driver.find_element(By.CSS_SELECTOR, "ul.learn-press-courses")
            course_items = course_list.find_elements(By.TAG_NAME, "li")
            course_count = len(course_items)
            # In ra HTML c·ªßa danh s√°ch kh√≥a h·ªçc ƒë·ªÉ debug
            print(f"HTML c·ªßa danh s√°ch kh√≥a h·ªçc:\n{course_list.get_attribute('outerHTML')}")
            
            # Ch·ª•p ·∫£nh m√†n h√¨nh k·∫øt qu·∫£
            self.take_screenshot(f"courses_per_page_{value}")
            
            # Ki·ªÉm tra s·ªë l∆∞·ª£ng kh√≥a h·ªçc hi·ªÉn th·ªã c√≥ ƒë√∫ng v·ªõi gi√° tr·ªã ƒë√£ c√†i ƒë·∫∑t kh√¥ng
            print(f"S·ªë l∆∞·ª£ng kh√≥a h·ªçc hi·ªÉn th·ªã: {course_count}, Gi√° tr·ªã c√†i ƒë·∫∑t: {value}")
            
            if course_count == value:
                print(f"‚úÖ Test PASS: S·ªë l∆∞·ª£ng kh√≥a h·ªçc hi·ªÉn th·ªã ({course_count}) ƒë√∫ng v·ªõi gi√° tr·ªã c√†i ƒë·∫∑t ({value})")
            else:
                print(f"‚ùå Test FAILED: S·ªë l∆∞·ª£ng kh√≥a h·ªçc hi·ªÉn th·ªã ({course_count}) kh√¥ng kh·ªõp v·ªõi gi√° tr·ªã c√†i ƒë·∫∑t ({value})")
                self.fail(f"S·ªë l∆∞·ª£ng kh√≥a h·ªçc hi·ªÉn th·ªã ({course_count}) kh√¥ng kh·ªõp v·ªõi gi√° tr·ªã c√†i ƒë·∫∑t ({value})")
            
            # Quay l·∫°i trang c√†i ƒë·∫∑t ƒë·ªÉ th·ª≠ gi√° tr·ªã ti·∫øp theo
            settings_url = f"{self.BASE_URL}{self.SETTINGS_PATH}&tab=courses"
            self.driver.get(settings_url)
            self.step_demo("Quay l·∫°i trang c√†i ƒë·∫∑t LearnPress")
            
        except Exception as e:
            self.take_screenshot(f"courses_per_page_{value}_failed")
            self.fail(f"Ki·ªÉm tra v·ªõi gi√° tr·ªã {value} th·∫•t b·∫°i: {str(e)}")

if __name__ == "__main__":
    unittest.main()
