import unittest
import time
import os
import datetime
from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from webdriver_manager.chrome import ChromeDriverManager
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException, NoSuchElementException

class LearnPressEnrollCourseTest(unittest.TestCase):
    BASE_URL = "http://wp.local"
    USERNAME = "admin"
    PASSWORD = "admin"
    SCREENSHOT_DIR = os.path.join(os.path.dirname(os.path.dirname(os.path.dirname(__file__))), "screenshots")

    @classmethod
    def setUpClass(cls):
        if not os.path.exists(cls.SCREENSHOT_DIR):
            os.makedirs(cls.SCREENSHOT_DIR)
        cls.driver = webdriver.Chrome(service=Service(ChromeDriverManager().install()))
        cls.driver.maximize_window()
        cls.driver.implicitly_wait(10)

    @classmethod
    def tearDownClass(cls):
        cls.driver.quit()

    def take_screenshot(self, test_name):
        timestamp = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"{timestamp}_{test_name}.png"
        filepath = os.path.join(self.SCREENSHOT_DIR, filename)
        try:
            self.driver.save_screenshot(filepath)
            print(f"üì∏ ƒê√£ ch·ª•p ·∫£nh m√†n h√¨nh: {filepath}")
            return filepath
        except Exception as e:
            print(f"‚ùå Kh√¥ng th·ªÉ ch·ª•p ·∫£nh m√†n h√¨nh: {str(e)}")
            return None


    def step_demo(self, msg, delay=1.5):
        print(f"[DEMO] {msg}")
        time.sleep(delay)

    def test_01_enroll_first_course(self):
        """Test Case: Enroll the first course on /courses/ page"""
        try:
            # Truy c·∫≠p trang /courses/
            courses_url = f"{self.BASE_URL}/courses/"
            self.driver.get(courses_url)
            self.step_demo(f"Truy c·∫≠p trang danh s√°ch kho√° h·ªçc: {courses_url}")
            wait = WebDriverWait(self.driver, 10)
            # T√¨m ul ch·ª©a danh s√°ch kho√° h·ªçc (d√πng selector ƒë∆°n gi·∫£n cho m·ªçi theme)
            course_list = wait.until(EC.presence_of_element_located((
                By.CSS_SELECTOR, "ul.learn-press-courses"
            )))
            # T√¨m li ƒë·∫ßu ti√™n
            first_li = course_list.find_element(By.TAG_NAME, "li")
            # T√¨m n√∫t Read more trong li ƒë·∫ßu ti√™n
            read_more_btn = first_li.find_element(By.CSS_SELECTOR, "div.course-button-read-more a")
            course_detail_url = read_more_btn.get_attribute("href")
            self.step_demo(f"Nh·∫•n Read more ƒë·ªÉ v√†o trang chi ti·∫øt: {course_detail_url}")
            read_more_btn.click()
            self.step_demo("ƒê√£ nh·∫•n Read more, v√†o trang chi ti·∫øt kho√° h·ªçc")
            # ƒê·ª£i trang detail load
            wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, "body.single-lp_course")))
            # T√¨m form enroll v√† click Start Now
            enroll_form = wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, "form.enroll-course")))
            start_now_btn = enroll_form.find_element(By.CSS_SELECTOR, "button[type='submit']")
            self.step_demo("T√¨m th·∫•y n√∫t Start Now, chu·∫©n b·ªã nh·∫•n ƒë·ªÉ b·∫Øt ƒë·∫ßu h·ªçc kho√° h·ªçc")
            start_now_btn.click()
            self.step_demo("ƒê√£ nh·∫•n Start Now ƒë·ªÉ b·∫Øt ƒë·∫ßu h·ªçc kho√° h·ªçc!")
            
            # Sau khi click, ki·ªÉm tra n·∫øu xu·∫•t hi·ªán form checkout y√™u c·∫ßu ƒëƒÉng nh·∫≠p
            try:
                checkout_form = wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, "form#learn-press-checkout-form.lp-checkout-form")))
                self.step_demo("Ph√°t hi·ªán form checkout, ti·∫øn h√†nh ƒëƒÉng nh·∫≠p...")
                # ƒêi·ªÅn username v√† password
                username_input = checkout_form.find_element(By.ID, "username")
                password_input = checkout_form.find_element(By.ID, "password")
                username_input.clear()
                username_input.send_keys(self.USERNAME)
                password_input.clear()
                password_input.send_keys(self.PASSWORD)
                self.step_demo("ƒê√£ nh·∫≠p username v√† password, chu·∫©n b·ªã nh·∫•n Place order")
                # Click Place order
                place_order_btn = checkout_form.find_element(By.ID, "learn-press-checkout-place-order")
                place_order_btn.click()
                self.step_demo(f"ƒê√£ ƒëƒÉng nh·∫≠p th√†nh c√¥ng v·ªõi user: {self.USERNAME} tr√™n trang checkout!")
                self.take_screenshot("checkout_login_success")
            except Exception as ce:
                print("Kh√¥ng xu·∫•t hi·ªán form checkout ho·∫∑c kh√¥ng c·∫ßn ƒëƒÉng nh·∫≠p ti·∫øp.")
            
            # Sau khi checkout, ki·ªÉm tra trang nh·∫≠n order
            try:
                # ƒê·ª£i chuy·ªÉn trang sang /lp-checkout/lp-order-received/
                wait.until(EC.url_contains("lp-order-received"))
                self.step_demo("ƒê√£ chuy·ªÉn sang trang order received.")
                # T√¨m <tr class="item">
                item_row = wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, "tr.item")))
                course_link = item_row.find_element(By.TAG_NAME, "a")
                course_url = course_link.get_attribute("href")
                self.step_demo(f"Click v√†o link kho√° h·ªçc: {course_url}")
                course_link.click()
                self.step_demo("ƒê√£ v√†o l·∫°i trang chi ti·∫øt kho√° h·ªçc sau khi order")
                # ƒê·ª£i trang detail load
                wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, "body.single-lp_course")))
                # Ki·ªÉm tra n√∫t tr·∫°ng th√°i kho√° h·ªçc
                try:
                    finish_btn = self.driver.find_element(By.CSS_SELECTOR, "button.wp-block-learnpress-course-button.lp-button.btn-finish-course")
                    btn_text = finish_btn.text.strip().lower()
                    self.step_demo(f"ƒê√£ ki·ªÉm tra tr·∫°ng th√°i kho√° h·ªçc sau khi enroll. N√∫t tr·∫°ng th√°i: '{btn_text}'")
                    self.take_screenshot("course_status_button")
                    if btn_text in ["finish", "continue"]:
                        self.step_demo(f"‚úÖ Th√†nh c√¥ng: Tr·∫°ng th√°i kho√° h·ªçc l√† '{btn_text}'. ƒê√£ ƒëƒÉng k√Ω v√† truy c·∫≠p kho√° h·ªçc th√†nh c√¥ng!")
                    elif btn_text == "start now":
                        self.fail("‚ùå Th·∫•t b·∫°i: Sau khi enroll, tr·∫°ng th√°i v·∫´n l√† 'Start Now'!")
                    else:
                        print(f"N√∫t tr·∫°ng th√°i kh√¥ng x√°c ƒë·ªãnh ('{btn_text}'), c·∫ßn ki·ªÉm tra l·∫°i.")
                except Exception as btn_e:
                    self.fail(f"Kh√¥ng t√¨m th·∫•y n√∫t tr·∫°ng th√°i kho√° h·ªçc: {str(btn_e)}")
            except Exception as order_e:
                self.fail(f"Kh√¥ng ki·ªÉm tra ƒë∆∞·ª£c tr·∫°ng th√°i kho√° h·ªçc sau khi checkout: {str(order_e)}")
            
        except Exception as e:
            self.take_screenshot("enroll_course_failed")
            self.fail(f"Kh√¥ng th·ªÉ enroll kho√° h·ªçc: {str(e)}")

if __name__ == "__main__":
    unittest.main()
