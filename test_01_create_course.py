import unittest
import time
import random
import string
import os
import datetime
import tempfile
import requests
from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from webdriver_manager.chrome import ChromeDriverManager
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException, NoSuchElementException
from selenium.webdriver.common.action_chains import ActionChains

class LearnPressCreateCourseTest(unittest.TestCase):
    # Th∆∞ m·ª•c l∆∞u ·∫£nh ch·ª•p m√†n h√¨nh
    SCREENSHOT_DIR = os.path.join(os.path.dirname(os.path.dirname(os.path.dirname(__file__))), "screenshots")
    BASE_URL = "http://wp.local"
    LOGIN_PATH = "/wp-login.php"
    ADMIN_PATH = "/wp-admin"
    COURSES_PATH = "/wp-admin/edit.php?post_type=lp_course"
    USERNAME = "admin"
    PASSWORD = "admin"
    
    @classmethod
    def setUpClass(cls):
        """Kh·ªüi t·∫°o tr√¨nh duy·ªát v√† ƒëƒÉng nh·∫≠p m·ªôt l·∫ßn duy nh·∫•t cho t·∫•t c·∫£ c√°c test"""
        # T·∫°o th∆∞ m·ª•c screenshots n·∫øu ch∆∞a t·ªìn t·∫°i
        if not os.path.exists(cls.SCREENSHOT_DIR):
            os.makedirs(cls.SCREENSHOT_DIR)
            
        # Kh·ªüi t·∫°o tr√¨nh duy·ªát
        cls.driver = webdriver.Chrome(service=Service(ChromeDriverManager().install()))
        cls.driver.maximize_window()
        cls.driver.implicitly_wait(10)
        
        # ƒêƒÉng nh·∫≠p v√†o WordPress
        cls.login(cls)
    
    @classmethod
    def tearDownClass(cls):
        """ƒê√≥ng tr√¨nh duy·ªát sau khi ho√†n th√†nh t·∫•t c·∫£ c√°c test"""
        cls.driver.quit()
    
    def login(self):
        """ƒêƒÉng nh·∫≠p v√†o trang qu·∫£n tr·ªã WordPress"""
        login_url = f"{self.BASE_URL}{self.LOGIN_PATH}"
        self.driver.get(login_url)
        print(f"ƒêang truy c·∫≠p trang ƒëƒÉng nh·∫≠p: {login_url}")
        
        # Nh·∫≠p username
        username_input = self.driver.find_element(By.ID, "user_login")
        username_input.clear()
        username_input.send_keys(self.USERNAME)
        
        # Nh·∫≠p password
        password_input = self.driver.find_element(By.ID, "user_pass")
        password_input.clear()
        password_input.send_keys(self.PASSWORD)
        
        # Nh·∫•n n√∫t ƒëƒÉng nh·∫≠p
        login_btn = self.driver.find_element(By.ID, "wp-submit")
        login_btn.click()
        
        # Ch·ªù trang qu·∫£n tr·ªã t·∫£i
        wait = WebDriverWait(self.driver, 20)
        try:
            wait.until(EC.presence_of_element_located((By.ID, "wpadminbar")))
            
            # Ki·ªÉm tra ƒëƒÉng nh·∫≠p th√†nh c√¥ng
            if "B·∫£ng tin" in self.driver.page_source or "Dashboard" in self.driver.page_source:
                print("‚úÖ ƒêƒÉng nh·∫≠p th√†nh c√¥ng")
                return True
            else:
                print("‚ùå ƒêƒÉng nh·∫≠p th·∫•t b·∫°i: Kh√¥ng t√¨m th·∫•y text Dashboard")
                self.take_screenshot("login_failed_no_dashboard")
                return False
        except TimeoutException:
            print("‚ùå ƒêƒÉng nh·∫≠p th·∫•t b·∫°i: Timeout khi ch·ªù admin bar")
            self.take_screenshot("login_failed_timeout")
            return False
    
    def take_screenshot(self, test_name):
        """Ch·ª•p ·∫£nh m√†n h√¨nh khi test th·∫•t b·∫°i"""
        # T·∫°o t√™n file ·∫£nh ch·ª•p v·ªõi timestamp
        timestamp = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"{timestamp}_{test_name}.png"
        filepath = os.path.join(self.SCREENSHOT_DIR, filename)
        
        # Ch·ª•p ·∫£nh m√†n h√¨nh
        try:
            self.driver.save_screenshot(filepath)
            print(f"üì∏ ƒê√£ ch·ª•p ·∫£nh m√†n h√¨nh: {filepath}")
            return filepath
        except Exception as e:
            print(f"‚ùå Kh√¥ng th·ªÉ ch·ª•p ·∫£nh m√†n h√¨nh: {str(e)}")
            return None
    
    def download_image_from_url(self, url):
        """Download image from URL and save it to a temporary file"""
        try:
            # Create a temporary file with .jpg extension
            temp_file = tempfile.NamedTemporaryFile(suffix='.jpg', delete=False)
            temp_path = temp_file.name
            temp_file.close()
            
            # Download the image
            response = requests.get(url, stream=True)
            response.raise_for_status()
            
            with open(temp_path, 'wb') as file:
                for chunk in response.iter_content(chunk_size=8192):
                    file.write(chunk)
            
            print(f"‚úÖ ƒê√£ t·∫£i ·∫£nh th√†nh c√¥ng t·ª´ {url} v√†o {temp_path}")
            return temp_path
        except Exception as e:
            print(f"‚ùå Kh√¥ng th·ªÉ t·∫£i ·∫£nh t·ª´ {url}: {str(e)}")
            return None
            
    def step_demo(self, msg, delay=1.5):
        print(f"[DEMO] {msg}")
        time.sleep(delay)

    def test_01_create_new_course(self):
        """Test Case 1: T·∫°o kh√≥a h·ªçc m·ªõi"""
        try:
            # B∆∞·ªõc 1: Truy c·∫≠p trang qu·∫£n tr·ªã kh√≥a h·ªçc
            courses_url = f"{self.BASE_URL}{self.COURSES_PATH}"
            self.driver.get(courses_url)
            self.step_demo(f"Truy c·∫≠p trang qu·∫£n tr·ªã kh√≥a h·ªçc: {courses_url}")
            
            # Ch·ªù trang t·∫£i xong
            wait = WebDriverWait(self.driver, 15)
            wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, "h1.wp-heading-inline, .page-title-action")))
            
            # Ki·ªÉm tra ti√™u ƒë·ªÅ trang
            page_title = self.driver.find_element(By.CLASS_NAME, "wp-heading-inline").text
            self.assertTrue("Courses" in page_title or "Kh√≥a h·ªçc" in page_title, 
                            "Kh√¥ng th·ªÉ ƒëi·ªÅu h∆∞·ªõng ƒë·∫øn trang qu·∫£n l√Ω kh√≥a h·ªçc")
            print("‚úÖ ƒê√£ ƒëi·ªÅu h∆∞·ªõng th√†nh c√¥ng ƒë·∫øn trang qu·∫£n l√Ω kh√≥a h·ªçc")
            
            # B∆∞·ªõc 2: Nh·∫•n n√∫t Add New ƒë·ªÉ t·∫°o kh√≥a h·ªçc m·ªõi
            add_new_btn = wait.until(EC.element_to_be_clickable((By.CSS_SELECTOR, "a.page-title-action")))
            self.step_demo("T√¨m th·∫•y v√† chu·∫©n b·ªã nh·∫•n n√∫t Add New ƒë·ªÉ t·∫°o kh√≥a h·ªçc m·ªõi")
            add_new_btn.click()
            self.step_demo("ƒê√£ nh·∫•n n√∫t Add New ƒë·ªÉ t·∫°o kh√≥a h·ªçc m·ªõi")
            
            # Ch·ªù trang t·∫£i xong
            wait = WebDriverWait(self.driver, 15)
            wait.until(EC.presence_of_element_located((By.ID, "title")))
            print("ƒê√£ t·∫£i trang th√™m kh√≥a h·ªçc m·ªõi")
            
            # B∆∞·ªõc 3: T·∫°o ti√™u ƒë·ªÅ kh√≥a h·ªçc v·ªõi timestamp
            timestamp = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            course_title = f"Test course {timestamp}"
            
            # B∆∞·ªõc 3: Nh·∫≠p ti√™u ƒë·ªÅ kh√≥a h·ªçc
            title_input = wait.until(EC.presence_of_element_located((By.ID, "title")))
            course_title = f"Test Course {datetime.datetime.now().strftime('%H%M%S')}"
            self.step_demo(f"Nh·∫≠p ti√™u ƒë·ªÅ kh√≥a h·ªçc: {course_title}")
            title_input.clear()
            title_input.send_keys(course_title)
            print(f"‚úÖ ƒê√£ nh·∫≠p ti√™u ƒë·ªÅ kh√≥a h·ªçc: {course_title}")
            
            # B∆∞·ªõc 4: Th√™m m√¥ t·∫£ kh√≥a h·ªçc
            # Chuy·ªÉn ƒë·∫øn iframe c·ªßa tr√¨nh so·∫°n th·∫£o n·∫øu c√≥
            try:
                # N·∫øu c√≥ iframe, chuy·ªÉn ƒë·∫øn iframe
                iframe = self.driver.find_element(By.ID, "content_ifr")
                self.driver.switch_to.frame(iframe)
                editor_body = self.driver.find_element(By.ID, "tinymce")
                editor_body.clear()
                editor_body.send_keys(f"This is an automated test description for {course_title}. Created by Selenium test.")
                # Chuy·ªÉn v·ªÅ trang ch√≠nh
                self.driver.switch_to.default_content()
            except NoSuchElementException:
                # N·∫øu kh√¥ng c√≥ iframe, s·ª≠ d·ª•ng textarea tr·ª±c ti·∫øp
                content_area = self.driver.find_element(By.ID, "content")
                content_area.clear()
                content_area.send_keys(f"This is an automated test description for {course_title}. Created by Selenium test.")
            
            self.step_demo("ƒê√£ th√™m m√¥ t·∫£ kh√≥a h·ªçc")
            
            # B∆∞·ªõc 5: Xu·∫•t b·∫£n kh√≥a h·ªçc
            # ƒê·∫£m b·∫£o kh√¥ng c√≥ c·ª≠a s·ªï modal n√†o ƒëang m·ªü
            try:
                modals = self.driver.find_elements(By.CSS_SELECTOR, ".media-modal")
                if modals:
                    close_button = self.driver.find_element(By.CSS_SELECTOR, ".media-modal-close")
                    close_button.click()
                    time.sleep(1)
            except:
                pass
            
            # Cu·ªôn l√™n ƒë·∫ßu trang ƒë·ªÉ ƒë·∫£m b·∫£o c√≥ th·ªÉ nh√¨n th·∫•y n√∫t Publish
            self.driver.execute_script("window.scrollTo(0, 0);")
            self.step_demo("Cu·ªôn l√™n ƒë·∫ßu trang ƒë·ªÉ chu·∫©n b·ªã nh·∫•n Publish")
            
            # T√¨m v√† nh·∫•n n√∫t Publish
            publish_button = WebDriverWait(self.driver, 10).until(
                EC.element_to_be_clickable((By.ID, "publish"))
            )
            self.step_demo("T√¨m th·∫•y n√∫t Publish v√† chu·∫©n b·ªã nh·∫•n")
            publish_button.click()
            self.step_demo("ƒê√£ nh·∫•n n√∫t xu·∫•t b·∫£n kh√≥a h·ªçc")
            
            # Ch·ªù th√¥ng b√°o xu·∫•t b·∫£n th√†nh c√¥ng
            wait = WebDriverWait(self.driver, 10)
            success_notice = wait.until(EC.presence_of_element_located((By.ID, "message")))
            
            # Ki·ªÉm tra th√¥ng b√°o th√†nh c√¥ng
            self.assertTrue("Post published" in success_notice.text or "B√†i vi·∫øt ƒë√£ ƒë∆∞·ª£c xu·∫•t b·∫£n" in success_notice.text, 
                          "Xu·∫•t b·∫£n kh√≥a h·ªçc kh√¥ng th√†nh c√¥ng")
            print("‚úÖ ƒê√£ xu·∫•t b·∫£n kh√≥a h·ªçc th√†nh c√¥ng")
            
            # Ch·ª•p ·∫£nh m√†n h√¨nh ƒë·ªÉ x√°c nh·∫≠n
            self.step_demo("Ch·ª•p ·∫£nh m√†n h√¨nh x√°c nh·∫≠n ƒë√£ xu·∫•t b·∫£n th√†nh c√¥ng")
            self.take_screenshot("course_published")
            
            # B∆∞·ªõc 6: Xem kh√≥a h·ªçc ƒë√£ xu·∫•t b·∫£n
            view_post_link = self.driver.find_element(By.CSS_SELECTOR, "#message a")
            view_post_url = view_post_link.get_attribute("href")
            self.step_demo(f"Nh·∫•n v√†o li√™n k·∫øt xem kh√≥a h·ªçc: {view_post_url}")
            view_post_link.click()
            
            # Ch·ªù trang kh√≥a h·ªçc t·∫£i xong
            wait = WebDriverWait(self.driver, 10)
            wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, "body.single-lp_course")))
            
            # Ki·ªÉm tra ti√™u ƒë·ªÅ kh√≥a h·ªçc tr√™n trang
            page_title = self.driver.title
            self.assertTrue(course_title in page_title, f"Ti√™u ƒë·ªÅ kh√≥a h·ªçc kh√¥ng xu·∫•t hi·ªán tr√™n trang: {page_title}")
            print(f"‚úÖ ƒê√£ xem kh√≥a h·ªçc th√†nh c√¥ng: {page_title}")
            
            # Ch·ª•p ·∫£nh m√†n h√¨nh cu·ªëi c√πng
            self.step_demo("Ch·ª•p ·∫£nh m√†n h√¨nh cu·ªëi c√πng x√°c nh·∫≠n xem ƒë∆∞·ª£c kh√≥a h·ªçc")
            self.take_screenshot("view_course")
            
        except Exception as e:
            self.take_screenshot("create_new_course_failed")
            self.fail(f"T·∫°o kh√≥a h·ªçc m·ªõi th·∫•t b·∫°i: {str(e)}")
